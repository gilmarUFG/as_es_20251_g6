@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

System_Boundary(sistema, "Sistema Autônomo de Corridas") {

  Person(app, "App Móvel", "Usuário que interage via interface")

  ' Aplicativo Móvel (não possui lógica interna complexa aqui, é representado como ator)
  ' Poderia adicionar componentes internos (ex: UIController, LocalCache), se necessário

  Container_Boundary(api, "API Backend") {
    Component(apiController, "API Controller", "Node.js", "Recebe requisições HTTP/MQTT do App ou do Veículo")
    Component(apiService, "API Service", "Processa regras de negócio (corrida, cancelamento, avaliação)")
    Component(apiBridge, "API Bridge", "MQTT Client", "Comunica com o veículo e serviços externos")
  }

  Container_Boundary(banco, "Banco de Dados") {
    Component(bancoDados, "PostgreSQL", "PostgreSQL", "Armazena dados de usuários, veículos, corridas e códigos de validação")
  }

  Container_Boundary(faq, "Central de Ajuda / FAQs") {
    Component(faqAjuda, "Central de Ajuda", "HTML Estático", "Conteúdo acessado via API")
  }

  Container_Boundary(rotas, "Serviço de Cálculo de Rotas") {
    Component(servicoRotasController, "RotasController", "REST", "Recebe pedidos de cálculo de rotas")
    Component(servicoRotasService, "RotasService",  "Processa algoritmos de rotas com dados externos")
  }

  Container_Boundary(veiculo, "Sistemas Embarcados do Veículo") {
    Component(veiculoBridge, "VehicleBridge", "MQTT/REST", "Gateway principal de comunicação com o backend")
    Component(vehicleController, "VehicleController", "ROS/Node", "Recebe comandos do bridge (parar, desviar)")
    Component(vehicleService, "VehicleService", "C++", "Executa lógica de navegação e controle do carro")

    Component(geoController, "GeoPositioningController", "Sensor Driver", "Recebe sinal de GPS")
    Component(geoService, "GeoPositioningService", "GPS Logic", "Interpreta localização e atualiza posição")

    Component(powerController, "PowerMonitorController", "Sensor Driver", "Monitora carga elétrica")
    Component(powerService, "PowerMonitorService", "Battery Logic", "Analisa autonomia, define disponibilidade")

    Component(riskController, "RiskDetectionController", "Sensor Fusion", "Recebe dados de sensores")
    Component(riskService, "RiskDetectionService", "IA de Prevenção", "Prevê colisões e executa manobras")
  }

  ' APIs externas
  Component(apiTransito, "API de Trânsito", "REST EXTERNO", "Fornece dados em tempo real de tráfego")
  Component(apiClima, "API de Clima", "REST EXTERNO", "Fornece dados climáticos")
  Component(apiPagamento, "API de Pagamento", "REST EXTERNO", "Calcula valor da corrida e gerencia transações")
}

' --- RELACIONAMENTOS

Rel(app, apiController, "Solicita corrida, cancela, avalia", "HTTPS")

Rel(apiController, apiService, "Repassa requisições")
Rel(apiService, bancoDados, "Consulta e atualiza")
Rel(apiService, faqAjuda, "Consulta conteúdo")
Rel(apiService, apiBridge, "Solicita ações no veículo")
Rel(apiService, apiPagamento, "Solicita cálculo de custo e inicia pagamento")
Rel(apiPagamento, apiBridge, "Pagamento aprovado → Iniciar corrida")

Rel(apiBridge, veiculoBridge, "Envia comandos e recebe eventos", "MQTT")

Rel(veiculoBridge, vehicleController, "Comandos recebidos do backend")
Rel(vehicleController, vehicleService, "Executa lógica embarcada")

Rel(vehicleService, geoController, "Consulta posição")
Rel(geoController, geoService, "Fornece localização")

Rel(vehicleService, powerController, "Verifica energia")
Rel(powerController, powerService, "Análise de autonomia")

Rel(vehicleService, riskController, "Monitora sensores")
Rel(riskController, riskService, "Prevê risco e executa ações")

Rel(apiService, servicoRotasController, "Solicita rota")
Rel(servicoRotasController, servicoRotasService, "Calcula rota")
Rel(servicoRotasService, apiTransito, "Consulta tráfego")
Rel(servicoRotasService, apiClima, "Consulta clima")
Rel(servicoRotasService, geoService, "Consulta localização atual")

Rel(geoService, bancoDados, "Armazena histórico de localização")
Rel(powerService, bancoDados, "Armazena dados de bateria")
Rel(servicoRotasService, bancoDados, "Armazena rotas e histórico")

@enduml
